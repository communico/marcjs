#!/usr/bin/env node

const nopt = require('nopt');
const fs = require('fs');
const async = require('async');
const MARC = require('../lib/marcjs');

const parsed = nopt(
  {
    parser: ['iso2709', 'marcxml', 'mij'],
    formater: ['text', 'iso2709', 'marcxml', 'json', 'mij'],
    output: String,
    help: Boolean,
  },
  {
    p: '--parser',
    f: '--formater',
    o: '--output',
  },
  process.argv, 2,
);

function usage() {
  // eslint-disable-next-line no-console
  console.log(
    'Usage: marc -p iso2709|marcxml|mij -f text|iso2709|marc|mij -o result file1 file2',
  );
  process.exit(1);
}
if (parsed.help) { usage(); }

parsed.parser = parsed.parser || 'iso2709';
parsed.formater = parsed.formater || 'text';

const output = parsed.output ? fs.createWriteStream(parsed.output)
  : process.stdout;
const writer = MARC.stream(output, parsed.formater);
const tasks = [];
function addTask(input) {
  tasks.push(() => {
    const reader = MARC.stream(input, parsed.parser);
    reader.pipe(writer);
  });
}
if (parsed.argv.remain.length > 0) {
  parsed.argv.remain.forEach((file) => {
    addTask(fs.createReadStream(file));
  });
} else {
  addTask(process.stdin);
}
async.series(tasks);
